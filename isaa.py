# -*- coding: utf-8 -*-
"""isaa1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fwr8W78BCsdf2OS97gNX9RTXJs3FF1A1
"""

#on sender's side the four orientations of the electron are vertical(v), horizon
#tal(h), 45 degrees left(l)and 45 degrees right(r)
#on receiver's side splitters being used are diagonal beamsplitter(lr) and horiz
#ontal/vertical beamsplitter(vh)

from random import random

def get_key(sending_stream): 
    key=''
    
    print("Enter bit value for each orientation: ")
    for_v=input('for vertical: ')
    for_h=input('for horizontal: ')
    for_l=input('for left diagonal: ')
    for_r=input('for right diagonal: ')

    for i in sending_stream:
        if(i=='v'):
            key+=for_v
        elif(i=='h'):
            key+=for_h
        elif(i=='l'):
            key+=for_l
        elif(i=='r'):
            key+=for_r
    return(key)

def create_key(key_size,c,orientations):
    sending_stream=''

    for i in range(0,key_size):
        random_number=int(random()*1000000)
        sending_choice=random_number%c
        sending_stream+=orientations[sending_choice]   
        
    return(sending_stream)

orientations=['v','h','r','l']
splitter_type=['lr','vh']
lr=['l','r']
vh=['v','h']
splitters_used=''
received_key=''
Final_Key=''

key_size=500

#connecting to the cyber physical system

import itertools
import threading
import time
import sys

done = False
#here is the animation
def animate():
    sys.stdout.write('CONNECTING TO THE CYBERPHYSICAL SYSTEM \n')
    for c in itertools.cycle(['|', '/', '-', '\\']):
        if done:
            break
        sys.stdout.write('\r loading ' + c)
        sys.stdout.flush()
        time.sleep(0.5)
    sys.stdout.write('\rDone!\n')

t = threading.Thread(target=animate)
t.start()

#long process here
time.sleep(10)
done = True

sending_stream=create_key(key_size,4,orientations)
#print(sending_stream)

key=get_key(sending_stream)
#print(key)

splitters_used=create_key(len(sending_stream),2,splitter_type)  
#print(splitters_used)

"""for i in range(0,len(splitters_used),2):
    if(splitters_used[i:i+2]=='lr'):
        received_key+=lr[int((random()*1000000)%2)]
    elif(splitters_used[i:i+2]=='vh'):
        received_key+=vh[int((random()*1000000)%2)]

print(received_key)"""

#final_key=get_key(received_key)
#print(final_key) 

for i in range(0,key_size):
    if(sending_stream[i] in splitters_used[i:i+2]):
        Final_Key+=key[i]

key = Final_Key + "a"

print(key)
print(len(key))
def send_key():
    return(key)

print('The Key has been generated and now enter the text to be encrypted and decrypted later..\n\n')

key = key[:-1]  #function only known to the reciever

print(key)
print(len(key))

if(key[len(key)-1] == 'a'):
  print('Key has been compromised!! Exiting')

msg=input('Enter message to be sent')
key=key[0:5*len(msg)]
list1=[]
newword=''
last=''
for i in range(0,len(key),5):
    b=0
    c=0
    k=key[i:5+i]
    while(b<len(k)):
        c+=int(k[b])*(2**(len(k)-b-1))
        list1.append(c)
        b=b+1
for i in range(len(msg)):
    msg=msg.upper()
    n2=ord(msg[i])
    newword+=chr(n2^list1[i])
print('Message after encryption : \n')
print(newword)
for i in range(len(newword)):
    last+=chr(ord(newword[i])^list1[i])
print("Now on the reciever's side\n")
done = False
t = threading.Thread(target=animate)
t.start()

#long process here
time.sleep(10)
done = True
print('Message after decryption : ')
print(last)

#intruder program
#import sendersKey
#key = sendersKey.send_key()
import sys
key = '333332122112331134114134331444412233311111133434222412413121433112434341223223224123321223434244414114423412334143314224343344444324331233232214434234412323444112312334121223422331244242344124442223112124212214124411324424331341244221343a'
if(key[len(key)-1] == 'a'):
  print('Key has been compromised!! Exiting')
  sys.exit(1)    #end of program
msg=input('enter message to be sent')
key=key[0:5*len(msg)]
list1=[]
newword=''
last=''
for i in range(0,len(key),5):
    b=0
    c=0
    k=key[i:5+i]
    while(b<len(k)):
        c+=int(k[b])*(2**(len(k)-b-1))
        list1.append(c)
        b=b+1
for i in range(len(msg)):
    msg=msg.upper()
    n2=ord(msg[i])
    newword+=chr(n2^list1[i])
print('message after encryption')
print(newword)
print(list1)
for i in range(len(newword)):
    last+=chr(ord(newword[i])^list1[i])
print('message after decryption')
print(last)

#Decrypter program
list1=[80, 120, 136, 144, 147, 64, 96, 112, 120, 123, 80, 112, 124, 128, 132, 64, 96, 112, 116, 118, 32, 56, 68, 78, 82, 80, 120, 140, 148, 152, 32, 48, 60, 70, 74, 64, 88, 108, 116, 118, 80, 120, 140, 150, 155, 64, 88, 96, 104, 108, 48, 72, 80, 88, 92]
newword='=ÄÜÜ`7?*7'
last=''
for i in range(len(newword)):
    last+=chr(ord(newword[i])^list1[i])
print('message after decryption')
print(last)